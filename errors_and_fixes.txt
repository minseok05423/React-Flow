ERRORS AND FIXES
================

1. TypeScript Error: Could not find declaration file for '@xyflow/react'
   Error: 'c:/Users/Mini/OneDrive/문서/dev/study/cs_journey/react/react-libraries/React-Flow/node_modules/@xyflow/react/dist/esm/index.js' implicitly has an 'any' type.

   Cause: TypeScript declaration files were missing from the installed package.

   Fix: Reinstalled node_modules to get the proper TypeScript declaration files:
   ```
   rm -rf node_modules && npm install
   ```
   Then restarted TypeScript server in VS Code.

2. Tailwind Dynamic Classes Not Working
   Error: Dynamic Tailwind classes like `bg-[${data.color}]` not rendering correctly.

   Cause: Tailwind CSS doesn't recognize dynamic classes at build time due to purging.

   Fix: Used inline styles instead:
   ```jsx
   // Before (not working)
   <div className={`bg-[${data.color}]`}>{data.value}</div>

   // After (working)
   <div style={{ backgroundColor: data.color }}>{data.value}</div>
   ```

3. React State Update Pattern
   Issue: How to update a specific object in an array without removing and re-adding it.

   Solution: Use map() with spread operator for immutable updates:
   ```jsx
   setNodes(prev => prev.map(node =>
     node.id === '1'
       ? { ...node, data: { ...node.data, color: 'red' } }
       : node
   ))
   ```
   This pattern preserves all existing properties while only updating what's needed.

4. State Updates Inside State Callbacks Causing Unexpected Behavior
   Issue: Calling setState inside another setState callback caused position to increment by 200 instead of 100.

   Cause: Stale closure - the currPosition value gets captured when the function is created, and calling setCurrPosition inside setNodes callback creates timing issues.

   Fix: Move state updates outside of other state callbacks:
   ```jsx
   // Before (problematic)
   function HandleClick() {
     setNodes((prev) => {
       const newNode = { position: { x: currPosition, y: 0 } };
       setCurrPosition((prev) => (prev += 100)); // Inside callback
       return [...prev, newNode];
     });
   }

   // After (working)
   function HandleClick() {
     setNodes((prev) => {
       const newNode = { position: { x: currPosition, y: 0 } };
       return [...prev, newNode];
     });
     setCurrPosition(prev => prev + 100); // Outside callback
   }
   ```

5. React StrictMode Double Console Logs
   Issue: console.log() statements appearing twice in development.

   Cause: React.StrictMode intentionally double-renders components in development to help detect side effects.

   Solution: This is expected behavior in development. It only happens in dev mode, not production. Keep StrictMode enabled as it helps catch bugs.

6. AddNode function bug:
   ERROR:
   ```
   function AddNode() {
     setNodes((prev) => {
       lastNodePos = prev.pop()?.position;
       // ... rest of code
     });
   }
   ```

   ISSUE: Using pop() mutates the prev array by removing the last element,
   then spreading [...prev, newNode] adds to the already-modified array,
   causing the original last node to disappear.

   FIX:
   ```
   function AddNode() {
     setNodes((prev) => {
       const lastNodePos = prev[prev.length - 1]?.position;
       const newNode = {
         id: `${prev.length + 1}`,
         position: { ...lastNodePos, x: (lastNodePos?.x || 0) + 200 },
         data: { value: "test node", color: "#D9E9CF" },
         type: "testNode",
       };
       return [...prev, newNode];
     });
   }
   ```

7. DeleteNode function bug:
   ERROR:
   ```
   function DeleteNode() {
     setNodes((prev) =>
       prev.length !== 0 ?
       prev.pop() : prev;
     );
   }
   ```

   ISSUE: pop() modifies the original array and returns the removed element,
   not the modified array. This returns the popped element instead of the
   updated nodes array, breaking React state updates.

   FIX:
   ```
   function DeleteNode() {
     setNodes((prev) => {
       if (prev.length === 0) return prev;
       const newNodes = [...prev];
       newNodes.pop();
       return newNodes;
     });
   }
   ```

   OR use slice():
   ```
   function DeleteNode() {
     setNodes((prev) =>
       prev.length !== 0 ?
       prev.slice(0, -1) : prev
     );
   }
   ```

8. useReactFlow hook usage error:
   ERROR:
   ```
   const { fitView } = useReactFlow;

   function Workflow() {
     // component code
   }
   ```

   ISSUE: useReactFlow is a React hook that must be called inside a component,
   not destructured outside of it. React hooks can only be used inside React
   components or other custom hooks.

   FIX:
   ```
   function Workflow() {
     const { fitView } = useReactFlow();
     // component code
   }
   ```